services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: accounting_postgres
    environment:
      POSTGRES_DB: accounting_db
      POSTGRES_USER: accounting_user
      POSTGRES_PASSWORD: accounting_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - accounting_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U accounting_user -d accounting_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: accounting_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - accounting_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: accounting_backend
    ports:
      - "3000:3000"
    environment:
      # Database
      DATABASE_URL: postgresql://accounting_user:accounting_password@postgres:5432/accounting_db
      
      # Redis
      REDIS_URL: redis://:redis_password@redis:6379
      
      # JWT & Security
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key-change-in-production}
      JWT_EXPIRE: 7d
      
      # App Configuration
      NODE_ENV: production
      PORT: 3000
      FRONTEND_URL: http://localhost:5173
      
      # File Upload
      MAX_FILE_SIZE: 10485760
      UPLOAD_PATH: /app/uploads
      
      # Email (Optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      
      # Logging
      LOG_LEVEL: info
      LOG_FILE: /app/logs/app.log
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - ./backups:/app/backups
    networks:
      - accounting_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend Web Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: accounting_frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    environment:
      VITE_API_URL: http://localhost:3000/api
      VITE_APP_NAME: "سیستم حسابداری جامع"
      VITE_APP_VERSION: "1.0.0"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - accounting_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Backup Service (Optional)
  backup:
    image: postgres:15-alpine
    container_name: accounting_backup
    environment:
      PGPASSWORD: accounting_password
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - accounting_network
    command: >
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          /backup.sh
          sleep 86400
        done
      "
    restart: unless-stopped
    profiles:
      - backup

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  accounting_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16